# Generated by Django 4.2.2 on 2023-08-20 10:39

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Android',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True)),
                ('version', models.CharField(max_length=30, null=True)),
                ('remark', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'verbose_name': 'Operating System - Android',
                'verbose_name_plural': 'Operating Systems - Android',
            },
        ),
        migrations.CreateModel(
            name='Anything_Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('canceled', 'Canceled'), ('rejected', 'Rejected'), ('accepted', 'Accepted')], default='Pending', max_length=20, verbose_name='Status of Report')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True, default='', null=True)),
                ('remark_response', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'verbose_name': 'Random Request',
                'verbose_name_plural': 'Random Requests',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
            ],
            options={
                'verbose_name': "Devices' Category",
                'verbose_name_plural': "Devices' Categories",
            },
        ),
        migrations.CreateModel(
            name='Computer_Peripheral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='E.g., mouse, keyboard, speaker, printer, headpone or USB flash memory')),
                ('serial_number', models.TextField(unique=True)),
                ('remark', models.TextField(blank=True, default='', null=True, verbose_name='Remark/Description')),
                ('added', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Computer Peripheral',
                'verbose_name_plural': 'Computer Peripherals',
            },
        ),
        migrations.CreateModel(
            name='Computer_Peripheral_Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(db_comment='The price of spare part/peripheral', decimal_places=3, default=0.0, max_digits=8)),
                ('do_use', models.BooleanField(db_comment='A flag representing whethere to use this price object or not for calculating costs of spends', default=True, help_text='If checked, this price will be used for calculating future costs for the specified peripheral.', verbose_name='Do you want to use this price for the sepecified item ?')),
                ('added', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Computer Peripheral Price Object',
                'verbose_name_plural': "Computer Peripherals' Prices",
            },
        ),
        migrations.CreateModel(
            name='Computer_Spare_Part',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='E.g., CPU, HDD, SSD, RAM, ROM or RTC')),
                ('serial_number', models.TextField(unique=True)),
                ('remark', models.TextField(blank=True, default='', null=True, verbose_name='Remark/Description')),
                ('added', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Computer Spare Part',
                'verbose_name_plural': 'Computer Spare Parts',
            },
        ),
        migrations.CreateModel(
            name='Computer_Spare_Part_Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(db_comment='The price of spare part', decimal_places=3, default=0.0, max_digits=8)),
                ('do_use', models.BooleanField(db_comment='A flag representing whethere to use this price object or not for calculating costs of spends', default=True, verbose_name='Do you want to use this price for the sepecified item ?')),
                ('added', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Computer Spare Part Price Object',
                'verbose_name_plural': "Computer Spare Parts' Prices",
            },
        ),
        migrations.CreateModel(
            name='Corporate_Donor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_comment='Corporate_Donor_name', max_length=40, unique=True)),
            ],
            options={
                'verbose_name': 'Corporate Donor',
                'verbose_name_plural': 'Corporate Donors',
            },
        ),
        migrations.CreateModel(
            name='Corporate_Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=30, unique=True)),
            ],
            options={
                'verbose_name': "Corporate's Type",
                'verbose_name_plural': "Corporates' Types",
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barcode', models.TextField(db_comment='Bar Code works like an id', help_text='Bar Code is like an id', unique=True)),
                ('serial_number', models.TextField(blank=True, null=True, unique=True)),
                ('status', models.CharField(choices=[('not_inspected', 'Not Inspected'), ('scrapped', 'Scrapped'), ('refurbished', 'Refurbished/Ready')], default='not_inspected', max_length=30, verbose_name='Status of Device')),
                ('operating_system', models.CharField(choices=[('windows', 'Windows'), ('macos', 'macOS'), ('linux', 'Linux'), ('ios', 'iOS'), ('android', 'Android')], default='windows', max_length=20)),
                ('individual_donor_flag', models.BooleanField(blank=True, default=False, null=True, verbose_name='Device(s) has been donated by individual person')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True, default='', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Device_Peripherals_Details',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.BigIntegerField(default=1)),
                ('is_bought', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Device - Peripheral(s) with Device',
                'verbose_name_plural': 'Device - Peripheral(s) with Devices',
            },
        ),
        migrations.CreateModel(
            name='Device_Refurbishment_Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('canceled', 'Canceled'), ('rejected', 'Rejected'), ('accepted', 'Accepted')], default='Pending', max_length=20, verbose_name='Status of Report')),
                ('receive_date', models.DateTimeField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True, default='', null=True)),
                ('remark_response', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'verbose_name': 'Request - Refurbishment of Device',
                'verbose_name_plural': 'Requests - Refurbishment of Devices',
            },
        ),
        migrations.CreateModel(
            name='Device_Refurbishment_Request_Details',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.BigIntegerField(default=1)),
                ('oem_brand', models.CharField(choices=[('apple', 'Apple'), ('others', 'Others')], default='others', max_length=20)),
                ('individual_donor_flag', models.BooleanField(blank=True, default=False, null=True, verbose_name='Device(s) has been donated by individual person')),
            ],
            options={
                'verbose_name': 'Request Details - Refurbishment of Device',
                'verbose_name_plural': 'Requests Details - Refurbishment of Devices',
            },
        ),
        migrations.CreateModel(
            name='Device_Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oem_brand', models.CharField(choices=[('apple', 'Apple'), ('others', 'Others')], default='others', max_length=20)),
                ('quantity', models.BigIntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Request - Device',
                'verbose_name_plural': 'Requests - Device(s)',
            },
        ),
        migrations.CreateModel(
            name='Device_Software_Details',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_bought', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Device - Software(s) installed in Device',
                'verbose_name_plural': 'Device - Software(s) installed in Devices',
            },
        ),
        migrations.CreateModel(
            name='Device_Spare_Parts_Details',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.BigIntegerField(default=1)),
                ('is_bought', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Device - Spare Part(s) with Device',
                'verbose_name_plural': 'Device - Spare Part(s) with Devices',
            },
        ),
        migrations.CreateModel(
            name='Display_Size',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.FloatField(default='4.70', help_text='Display sizes are in inches', unique=True)),
            ],
            options={
                'verbose_name': "Display's Size",
            },
        ),
        migrations.CreateModel(
            name='GPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='E.g., Nvidia GeForce 720M', max_length=30, unique=True, verbose_name="GPU's Company and Model/Name")),
            ],
            options={
                'verbose_name': 'GPU',
                'verbose_name_plural': "GPU's",
            },
        ),
        migrations.CreateModel(
            name='Individual_Donor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Individual Donor',
                'verbose_name_plural': 'Individual Donors',
            },
        ),
        migrations.CreateModel(
            name='Inspect_Peripheral_Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('canceled', 'Canceled'), ('rejected', 'Rejected'), ('accepted', 'Accepted')], default='Pending', max_length=20, verbose_name='Status of Report')),
                ('receive_date', models.DateTimeField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True, default='', null=True)),
                ('remark_response', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'verbose_name': 'Requests - Peripheral Inspection',
                'verbose_name_plural': 'Requests - Peripheral(s) Inspections',
            },
        ),
        migrations.CreateModel(
            name='Inspect_Peripheral_Request_Details',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.BigIntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Request Details - Peripheral Inspection',
                'verbose_name_plural': 'Requests Details - Peripheral(s) Inspections',
            },
        ),
        migrations.CreateModel(
            name='IOS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True)),
                ('version', models.CharField(max_length=30, null=True)),
                ('remark', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'verbose_name': 'Operating System - iOS',
                'verbose_name_plural': 'Operating Systems - iOS',
            },
        ),
        migrations.CreateModel(
            name='Linux',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True)),
                ('version', models.CharField(max_length=30, null=True)),
                ('remark', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'verbose_name': 'Operating System - Linux',
                'verbose_name_plural': 'Operating Systems - Linux',
            },
        ),
        migrations.CreateModel(
            name='MacOS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True)),
                ('version', models.CharField(max_length=30, null=True)),
                ('remark', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'verbose_name': 'Operating System - macOS',
                'verbose_name_plural': 'Operating System - macOS',
            },
        ),
        migrations.CreateModel(
            name='OEM_Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='oem_brand', max_length=30, unique=True, verbose_name="Devices' OEM Brand")),
            ],
            options={
                'verbose_name': 'OEM Brand',
                'verbose_name_plural': 'OEM Brands',
            },
        ),
        migrations.CreateModel(
            name='Peripheral_Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.BigIntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Request - Peripheral',
                'verbose_name_plural': 'Requests - Peripheral(s)',
            },
        ),
        migrations.CreateModel(
            name='Processor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='E.g., Intell Core i7 or Intell Core i5', max_length=30, unique=True, verbose_name="Processor's Company and Name/Model")),
            ],
        ),
        migrations.CreateModel(
            name='RAM_Size',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.IntegerField(db_column='ram_size', default=4, unique=True, verbose_name="RAM's Size(GB)")),
            ],
            options={
                'verbose_name': 'RAM Size',
            },
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name="Software's Name")),
                ('operating_system', models.CharField(choices=[('windows', 'Windows'), ('macos', 'macOS'), ('linux', 'Linux'), ('ios', 'iOS'), ('android', 'Android')], default='windows', max_length=20)),
                ('remark', models.TextField(blank=True, default='', null=True, verbose_name='Remark/Description')),
            ],
        ),
        migrations.CreateModel(
            name='Software_Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(db_comment='The price of spare part', decimal_places=3, default=0.0, max_digits=8)),
                ('do_use', models.BooleanField(db_comment='A flag representing whethere to use this price object or not for calculating costs of spends', default=True, help_text='If checked, this price will be used for calculating future costs for the specified software.', verbose_name='Do you want to use this price for the sepecified item ?')),
                ('added', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Software(s) Price',
                'verbose_name_plural': 'Softwares Prices',
            },
        ),
        migrations.CreateModel(
            name='Spare_Part_Peripheral_Device_Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('canceled', 'Canceled'), ('rejected', 'Rejected'), ('accepted', 'Accepted')], default='Pending', max_length=20, verbose_name='Status of Report')),
                ('receive_date', models.DateTimeField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('remark', models.TextField(blank=True, default='', null=True)),
                ('remark_response', models.TextField(blank=True, default='', null=True)),
                ('spare_part_flag', models.BooleanField(db_comment='Indicates whether spare part(s) has been requested or not', default=False, help_text='Has Spare Part(s) Been Requested?', verbose_name='Spare Part(s) has been requested')),
                ('peripheral_flag', models.BooleanField(db_comment='Indicates whether peripheral(s) has been requested or not', default=False, help_text='Has Peripheral(s) Been Requested?', verbose_name='Peripheral(s) has been requested')),
                ('device_flag', models.BooleanField(db_comment='Indicates whether device(s) has been requested or not', default=False, help_text='Has device(s) Been Requested?', verbose_name='Device(s) has been requested')),
            ],
            options={
                'verbose_name': 'Request - Spare Part/Peripheral/Device',
                'verbose_name_plural': 'Requests - Spare Part(s)/Peripheral(s)/Device(s)',
            },
        ),
        migrations.CreateModel(
            name='Spare_Part_Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.BigIntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Request - Spare Parts',
                'verbose_name_plural': 'Requests - Spare Part(s)',
            },
        ),
        migrations.CreateModel(
            name='Windows',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_name', models.TextField(help_text='E.g., MAR-Citizenship')),
                ('mar_name', models.TextField(help_text='E.g., ACTIVE-IT s.c.', verbose_name='MAR Name')),
                ('name', models.TextField(db_comment='This is also called Product Installed', help_text='E.g., Windows 10 PRO Citizenship')),
                ('installation_date', models.DateField(default=datetime.date.today)),
                ('product_key_id', models.TextField(db_comment='This is also called MAR COA SN', help_text='I.e., MAR COA SN', unique=True)),
                ('remark', models.TextField(blank=True, default='', null=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Operating System - Windows',
                'verbose_name_plural': 'Operating Systems - Windows',
            },
        ),
        migrations.CreateModel(
            name='Windows_Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=3, max_digits=5, unique=True)),
                ('do_use', models.BooleanField(db_comment='A flag representing whethere to use this price object or not for calculating costs of spends', default=True, help_text='check this option if you want to use this price for calculating future Windows Costs', verbose_name='Do you want to use this price for future Windows products?')),
                ('added', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Windows Price',
                'verbose_name_plural': 'Windows Prices',
            },
        ),
        migrations.CreateModel(
            name='Workplace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workplace', models.CharField(choices=[('operation_lab', 'Operation Lab'), ('warehouse', 'Warehouse'), ('else', 'Else')], default='else', max_length=30)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='windows_price',
            constraint=models.UniqueConstraint(condition=models.Q(('do_use', True)), fields=('do_use',), name='Only one Price should be True'),
        ),
        migrations.AddField(
            model_name='windows',
            name='device',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.device'),
        ),
        migrations.AddField(
            model_name='windows',
            name='price',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.windows_price'),
        ),
        migrations.AddField(
            model_name='spare_part_request',
            name='request',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.spare_part_peripheral_device_request'),
        ),
        migrations.AddField(
            model_name='spare_part_request',
            name='spare_part',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.computer_spare_part'),
        ),
        migrations.AddField(
            model_name='spare_part_peripheral_device_request',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='spare_part_peripheral_device_request',
            name='user_response',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_response_sp_p_d_request', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='software_price',
            name='software',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.software'),
        ),
        migrations.AddField(
            model_name='peripheral_request',
            name='peripheral',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.computer_peripheral'),
        ),
        migrations.AddField(
            model_name='peripheral_request',
            name='request',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.spare_part_peripheral_device_request'),
        ),
        migrations.AddField(
            model_name='macos',
            name='device',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.device'),
        ),
        migrations.AddField(
            model_name='linux',
            name='device',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.device'),
        ),
        migrations.AddField(
            model_name='ios',
            name='device',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.device'),
        ),
        migrations.AddField(
            model_name='inspect_peripheral_request_details',
            name='peripheral',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.computer_peripheral'),
        ),
        migrations.AddField(
            model_name='inspect_peripheral_request_details',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.inspect_peripheral_request'),
        ),
        migrations.AddField(
            model_name='inspect_peripheral_request',
            name='peripherals',
            field=models.ManyToManyField(to='base.computer_peripheral', verbose_name='Peripheral(s) to be inspected by technician(s)'),
        ),
        migrations.AddField(
            model_name='inspect_peripheral_request',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inspect_peripheral_request',
            name='user_response',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_response_peripheral_inspection_request', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='device_spare_parts_details',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.device'),
        ),
        migrations.AddField(
            model_name='device_spare_parts_details',
            name='price',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.computer_spare_part_price'),
        ),
        migrations.AddField(
            model_name='device_spare_parts_details',
            name='spare_part',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.computer_spare_part'),
        ),
        migrations.AddField(
            model_name='device_software_details',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.device'),
        ),
        migrations.AddField(
            model_name='device_software_details',
            name='price',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.software_price'),
        ),
        migrations.AddField(
            model_name='device_software_details',
            name='software',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.software'),
        ),
        migrations.AddField(
            model_name='device_request',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.category'),
        ),
        migrations.AddField(
            model_name='device_request',
            name='request',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.spare_part_peripheral_device_request'),
        ),
        migrations.AddField(
            model_name='device_refurbishment_request_details',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.category'),
        ),
        migrations.AddField(
            model_name='device_refurbishment_request_details',
            name='corporate_donor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.corporate_donor'),
        ),
        migrations.AddField(
            model_name='device_refurbishment_request_details',
            name='request',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.device_refurbishment_request'),
        ),
        migrations.AddField(
            model_name='device_refurbishment_request',
            name='categories',
            field=models.ManyToManyField(through='base.Device_Refurbishment_Request_Details', to='base.category'),
        ),
        migrations.AddField(
            model_name='device_refurbishment_request',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='device_refurbishment_request',
            name='user_response',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_response_device_refurbishment_request', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='device_peripherals_details',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.device'),
        ),
        migrations.AddField(
            model_name='device_peripherals_details',
            name='peripheral',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.computer_peripheral'),
        ),
        migrations.AddField(
            model_name='device_peripherals_details',
            name='price',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.computer_peripheral_price'),
        ),
        migrations.AddField(
            model_name='device',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.category', verbose_name='Category of Device'),
        ),
        migrations.AddField(
            model_name='device',
            name='corporate_donor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.corporate_donor'),
        ),
        migrations.AddField(
            model_name='device',
            name='display_size',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.display_size', verbose_name='Display Size in Inches (optional)'),
        ),
        migrations.AddField(
            model_name='device',
            name='gpu',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.gpu', verbose_name="Device's GPU (optional)"),
        ),
        migrations.AddField(
            model_name='device',
            name='individual_donor',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.individual_donor'),
        ),
        migrations.AddField(
            model_name='device',
            name='oem_brand',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.oem_brand', verbose_name="Device's OEM Brand"),
        ),
        migrations.AddField(
            model_name='device',
            name='peripherals',
            field=models.ManyToManyField(blank=True, default=None, null=True, through='base.Device_Peripherals_Details', to='base.computer_peripheral', verbose_name='peripherals with the device'),
        ),
        migrations.AddField(
            model_name='device',
            name='processor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.processor'),
        ),
        migrations.AddField(
            model_name='device',
            name='ram_size',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.ram_size', verbose_name='GB RAM size in the device (optional)'),
        ),
        migrations.AddField(
            model_name='device',
            name='softwares',
            field=models.ManyToManyField(blank=True, default='', null=True, through='base.Device_Software_Details', to='base.software', verbose_name='Installed Software(s) (optional)'),
        ),
        migrations.AddField(
            model_name='device',
            name='spare_parts',
            field=models.ManyToManyField(blank=True, default=None, null=True, through='base.Device_Spare_Parts_Details', to='base.computer_spare_part', verbose_name='New spare parts added to this device'),
        ),
        migrations.AddField(
            model_name='device',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='corporate_donor',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.corporate_type'),
        ),
        migrations.AddField(
            model_name='computer_spare_part_price',
            name='spare_part',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.computer_spare_part'),
        ),
        migrations.AddField(
            model_name='computer_peripheral_price',
            name='peripheral',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.computer_peripheral'),
        ),
        migrations.AddField(
            model_name='anything_request',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='anything_request',
            name='user_response',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_response_anything_request', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='android',
            name='device',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.device'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='computer_spare_part_price',
            constraint=models.UniqueConstraint(fields=('price', 'spare_part', 'do_use'), name='Duplicate. There is already a price of this spare part', violation_error_message='There is already a spare part with the same details as all of this one.'),
        ),
        migrations.AddConstraint(
            model_name='computer_spare_part_price',
            constraint=models.UniqueConstraint(condition=models.Q(('do_use', True)), fields=('spare_part', 'do_use'), name='Cannot use more than two prices for a single spare part at the same time', violation_error_message='Cannot use more than two prices for a single spare part at the same time. Please make do_use field of old prices False to add new to be used prices.'),
        ),
        migrations.AddConstraint(
            model_name='computer_peripheral_price',
            constraint=models.UniqueConstraint(fields=('price', 'peripheral', 'do_use'), name='Duplicate. There is already a price of this peripheral', violation_error_message='There is already a peripheral with the same details as all of this one.'),
        ),
        migrations.AddConstraint(
            model_name='computer_peripheral_price',
            constraint=models.UniqueConstraint(condition=models.Q(('do_use', True)), fields=('peripheral', 'do_use'), name='Cannot use more than two prices for a single peripheral at the same time', violation_error_message='Cannot use more than two prices for a single peripheral at the same time. Please make do_use field of old prices False to add new to be used prices.'),
        ),
    ]
